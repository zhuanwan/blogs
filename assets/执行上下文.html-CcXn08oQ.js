import{_ as s,c as a,e,o as p}from"./app-Cqb5tvJn.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h1><p><a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener noreferrer">转</a></p><p>执行上下文 {<br> 变量对象<br> 作用域链 -&gt; 函数的作用域在函数定义的时候就决定了<br> this<br> }</p><h2 id="this" tabindex="-1"><a class="header-anchor" href="#this"><span>this</span></a></h2><p>调用场景<br> var obj = {a: 1, b: function(){console.log(this);}}</p><ol><li>作为对象调用时，指向该对象 obj.b(); // 指向obj</li><li>作为函数调用, var b = obj.b; b(); // 指向全局window</li><li>为构造函数调用 var b = new Fun(); // this指向当前实例对象</li><li>作为call与apply调用 obj.b.apply(object, []); // this指向当前的object</li></ol><p>规范解读</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//示例1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line"><span class="token comment">//示例2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line"><span class="token comment">//示例3</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"><span class="token comment">//示例4</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"><span class="token comment">//示例5</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">,</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>var Reference = { base: foo, name: &#39;bar&#39;, strict: false };</p><ol><li><p>计算 MemberExpression 计算结果 foo.bar(就是（）前面的)</p></li><li><p>foo 是 reference 类型 IsPropertyReference(ref) 是 true （base value 是个对象，IsPropertyReference true）</p></li><li><p>this = GetBase(ref)</p></li><li><p>运算符导致 getValue(ref), 一旦getValue, ref就不是 reference, this undefined, 隐私转换全局对象</p></li></ol><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><p>this 实际上是在函数被调用时建立的一个绑定，它指向 什么 是完全由函数被调用的调用点来决定的。</p><p><a href="https://www.kancloud.cn/kancloud/you-dont-know-js-this-object-prototypes/516669" target="_blank" rel="noopener noreferrer">转</a></p>`,13)]))}const i=s(t,[["render",o]]),u=JSON.parse('{"path":"/jsBlock/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html","title":"执行上下文","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"this","slug":"this","link":"#this","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"git":{"updatedTime":1628756554000,"contributors":[{"name":"wuhui","username":"wuhui","email":"maniwu@aijiatui.com","commits":3,"url":"https://github.com/wuhui"}],"changelog":[{"hash":"d26e4a13cfeb6929ab0592e823d92e4a930fc261","time":1628756554000,"email":"maniwu@aijiatui.com","author":"wuhui","message":"up"},{"hash":"22549e7953a41909f4b84da9c0fc81e3df7a1ca8","time":1622022772000,"email":"maniwu@aijiatui.com","author":"wuhui","message":"up"},{"hash":"70d7486d2d3d181d5a8d8b27a8b8af705aadb684","time":1621828528000,"email":"maniwu@aijiatui.com","author":"wuhui","message":"up"}]},"filePathRelative":"jsBlock/执行上下文.md"}');export{i as comp,u as data};
