import{_ as s,c as a,e,o as p}from"./app-Cqb5tvJn.js";const l={};function t(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="react" tabindex="-1"><a class="header-anchor" href="#react"><span>React</span></a></h1><h2 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx"><span>jsx</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello World<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jsx本质上就是React.createElement的语法糖，调用createElement生成对象，所以需要import React from &#39;react&#39;</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>react17可以不用import React，React 17 在 React 的 package 中引入了两个新入口，这些入口只会被 Babel 和 TypeScript 等编译器使用。新的 JSX 转换不会将 JSX 转换为 React.createElement，而是自动从 React 的 package 中引入新的入口函数并调用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 由编译器引入（禁止自己引入！）</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>jsx <span class="token keyword">as</span> _jsx<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react/jsx-runtime&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">_jsx</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;Hello world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前，旧的转换的默认选项为 {&quot;runtime&quot;: &quot;classic&quot;}。如需启用新的转换，你可以使用 {&quot;runtime&quot;: &quot;automatic&quot;} 作为 @babel/plugin-transform-react-jsx 或 @babel/preset-react 的选项</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 如果你使用的是 @babel/preset-react</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-react&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string-property property">&quot;runtime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;automatic&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例https://codesandbox.io/s/didact-8-21ost中, 添加/** @jsxRuntime classic */，以便使用自定义的createElement</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"></span>
<span class="line"><span class="token doc-comment comment">/** <span class="token keyword">@jsxRuntime</span> classic */</span></span>
<span class="line"><span class="token doc-comment comment">/** <span class="token keyword">@jsx</span> Didact.createElement */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> Didact<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reactdom-render" tabindex="-1"><a class="header-anchor" href="#reactdom-render"><span>ReactDOM.render</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> container<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line"><span class="token function">legacyRenderSubtreeIntoContainer</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span> </span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 生成root</span></span>
<span class="line">  root <span class="token operator">=</span> </span>
<span class="line">  container<span class="token punctuation">.</span>_reactRootContainer <span class="token operator">=</span> </span>
<span class="line">  <span class="token function">legacyCreateRootFromDOMContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token function">createLegacyRoot</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">ReactDOMBlockingRoot</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">_internalRoot</span><span class="token operator">:</span> <span class="token function">createRootImpl</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=</span> </span>
<span class="line">                    <span class="token function">createContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">                    <span class="token function">createFiberRoot</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">                    <span class="token punctuation">{</span></span>
<span class="line">                      root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FiberRootNode</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">containerInfo</span><span class="token operator">:</span> container<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">}</span></span>
<span class="line">                      root<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FiberNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token number">0</span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token literal-property property">stateNode</span><span class="token operator">:</span> root<span class="token punctuation">,</span> <span class="token literal-property property">updateQueue</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">                      <span class="token keyword">return</span> root</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    </span>
<span class="line">    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span></span>
<span class="line">    <span class="token function-variable function">unmount</span><span class="token operator">:</span> <span class="token keyword">function</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 生成fibreRoot</span></span>
<span class="line">  fiberRoot <span class="token operator">=</span> root<span class="token punctuation">.</span>_internalRoot</span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 这里细节没看懂</span></span>
<span class="line">  <span class="token function">unbatchedUpdates</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">updateContainer</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> fiberRoot<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  updateContainer <span class="token operator">-</span><span class="token operator">&gt;</span> scheduleUpdateOnFiber <span class="token operator">-</span><span class="token operator">&gt;</span> performSyncWorkOnRoot <span class="token operator">-</span><span class="token operator">&gt;</span> renderRootSync <span class="token operator">-</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// workInProgressRoot = fiberRoot</span></span>
<span class="line">    <span class="token comment">// workInProgress = fiberRoot.current = fiberRoot.current.alternate</span></span>
<span class="line">    prepareFreshStack <span class="token operator">-</span><span class="token operator">&gt;</span> createWorkInProgress</span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 执行单元</span></span>
<span class="line">    workLoopSync <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> beginWork <span class="token operator">-</span><span class="token operator">&gt;</span> completeUnitOfWork</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=</span> </span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">_internalRoot</span><span class="token operator">:</span> <span class="token function">createRootImpl</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function-variable function">unmount</span><span class="token operator">:</span> <span class="token keyword">function</span></span>
<span class="line">  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=</span> </span>
<span class="line"></span>
<span class="line"><span class="token function">updateContainer</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=</span> </span>
<span class="line"></span>
<span class="line"><span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>current$1<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>current$1<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="diff" tabindex="-1"><a class="header-anchor" href="#diff"><span>diff</span></a></h2><h3 id="reconcilesingleelement" tabindex="-1"><a class="header-anchor" href="#reconcilesingleelement"><span>reconcileSingleElement</span></a></h3><ul><li>当 child !== null 且 key 相同且 type 不同时执行 deleteRemainingChildren 将 child 及其兄弟 fiber 都标记删除。</li><li>当 child !== null 且 key 不同时仅将 child 标记删除。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token comment">// 当前页面显示的</span></span>
<span class="line">  ul <span class="token operator">&gt;</span> li <span class="token operator">*</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 这次需要更新的</span></span>
<span class="line">  ul <span class="token operator">&gt;</span> p</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于本次更新时只有一个 p，属于单一节点的 Diff，会走上面介绍的代码逻辑。</p><p>在 reconcileSingleElement 中遍历之前的 3 个 fiber（对应的 DOM 为 3 个 li），寻找本次更新的 p 是否可以复用之前的 3 个 fiber 中某个的 DOM。</p><p>当 key 相同且 type 不同时，代表我们已经找到本次更新的 p 对应的上次的 fiber，但是 p 与 li type 不同，不能复用。既然唯一的可能性已经不能复用，则剩下的 fiber 都没有机会了，所以都需要标记删除。</p><p>当 key 不同时只代表遍历到的该 fiber 不能被 p 复用，后面还有兄弟 fiber 还没有遍历到。所以仅仅标记该 fiber 删除。</p><h3 id="reconcilechildrenarray" tabindex="-1"><a class="header-anchor" href="#reconcilechildrenarray"><span>reconcileChildrenArray</span></a></h3><p>第一轮遍历步骤如下：</p><ol><li>let i = 0，遍历 newChildren，将 newChildren[i] 与 oldFiber 比较，判断 DOM 节点是否可复用。</li><li>如果可复用，i++，继续比较 newChildren[i] 与 oldFiber.sibling，可以复用则继续遍历。</li><li>如果不可复用，分两种情况：</li><li>key 不同导致不可复用，立即跳出整个遍历，第一轮遍历结束。</li><li>key 相同 type 不同导致不可复用，会将 oldFiber 标记为 DELETION，并继续遍历</li><li>如果 newChildren 遍历完（即 i === newChildren.length - 1）或者 oldFiber 遍历完（即 oldFiber.sibling === null），跳出遍历，第一轮遍历结束。</li></ol><p>第一轮遍历完后：</p><ul><li>newChildren 和 oldFiber 都遍历完，结束</li><li>newChildren 遍历完，oldFiber 没遍历完，遍历剩下的 oldFiber，依次标记 Deletion。</li><li>newChildren 没遍历完，oldFiber 遍历完，遍历剩下的 newChildren 为生成的 workInProgress fiber 依次标记 Placement。</li></ul><p>newChildren 与 oldFiber 都没遍历完:<br> 第二轮遍历步骤如下：</p><ol><li>将所有还未处理的 oldFiber 存入以 key 为 key，oldFiber 为 value 的 Map（existingChildren ） 中。</li><li>最后一个可复用的节点在 oldFiber 中的位置索引（用变量 lastPlacedIndex 表示）。</li><li>用变量 oldIndex 表示遍历到的可复用节点在 oldFiber 中的位置索引。如果 oldIndex &lt; lastPlacedIndex，代表本次更新该节点需要向右移动。</li><li>lastPlacedIndex 初始为 0，每遍历一个可复用的节点，如果 oldIndex &gt;= lastPlacedIndex，则 lastPlacedIndex = oldIndex。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 之前</span></span>
<span class="line">abcd</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 之后</span></span>
<span class="line">acdb</span>
<span class="line"></span>
<span class="line"><span class="token operator">===</span>第一轮遍历开始<span class="token operator">===</span></span>
<span class="line">a（之后）vs a（之前）</span>
<span class="line">key 不变，可复用</span>
<span class="line">此时 a 对应的 oldFiber（之前的 a）在之前的数组（abcd）中索引为 <span class="token number">0</span></span>
<span class="line">所以 lastPlacedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">继续第一轮遍历<span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">c（之后）vs b（之前）</span>
<span class="line">key 改变，不能复用，跳出第一轮遍历</span>
<span class="line">此时 lastPlacedIndex <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">===</span>第一轮遍历结束<span class="token operator">===</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">===</span>第二轮遍历开始<span class="token operator">===</span></span>
<span class="line">newChildren <span class="token operator">===</span> cdb，没用完，不需要执行删除旧节点</span>
<span class="line">oldFiber <span class="token operator">===</span> bcd，没用完，不需要执行插入新节点</span>
<span class="line"></span>
<span class="line">将剩余 oldFiber（bcd）保存为 map</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当前 oldFiber：bcd</span></span>
<span class="line"><span class="token comment">// 当前 newChildren：cdb</span></span>
<span class="line"></span>
<span class="line">继续遍历剩余 newChildren</span>
<span class="line"></span>
<span class="line">key <span class="token operator">===</span> c 在 oldFiber 中存在</span>
<span class="line"><span class="token keyword">const</span> oldIndex <span class="token operator">=</span> c（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span></span>
<span class="line">此时 oldIndex <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 之前节点为 abcd，所以c.index === 2</span></span>
<span class="line">比较 oldIndex 与 lastPlacedIndex<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">如果 oldIndex <span class="token operator">&gt;=</span> lastPlacedIndex 代表该可复用节点不需要移动</span>
<span class="line">并将 lastPlacedIndex <span class="token operator">=</span> oldIndex<span class="token punctuation">;</span></span>
<span class="line">如果 oldIndex <span class="token operator">&lt;</span> lastplacedIndex 该可复用节点之前插入的位置索引小于这次更新需要插入的位置索引，代表该节点需要向右移动</span>
<span class="line"></span>
<span class="line">在例子中，oldIndex <span class="token number">2</span> <span class="token operator">&gt;</span> lastPlacedIndex <span class="token number">0</span>，</span>
<span class="line">则 lastPlacedIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">c 节点位置不变</span>
<span class="line"></span>
<span class="line">继续遍历剩余 newChildren</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当前oldFiber：bd</span></span>
<span class="line"><span class="token comment">// 当前newChildren：db</span></span>
<span class="line"></span>
<span class="line">key <span class="token operator">===</span> d 在 oldFiber 中存在</span>
<span class="line"><span class="token keyword">const</span> oldIndex <span class="token operator">=</span> d（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span></span>
<span class="line">oldIndex <span class="token number">3</span> <span class="token operator">&gt;</span> lastPlacedIndex <span class="token number">2</span> <span class="token comment">// 之前节点为 abcd，所以 d.index === 3</span></span>
<span class="line">则 lastPlacedIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">d 节点位置不变</span>
<span class="line"></span>
<span class="line">继续遍历剩余 newChildren</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当前 oldFiber：b</span></span>
<span class="line"><span class="token comment">// 当前 newChildren：b</span></span>
<span class="line"></span>
<span class="line">key <span class="token operator">===</span> b 在 oldFiber 中存在</span>
<span class="line"><span class="token keyword">const</span> oldIndex <span class="token operator">=</span> b（之前）<span class="token punctuation">.</span>index<span class="token punctuation">;</span></span>
<span class="line">oldIndex <span class="token number">1</span> <span class="token operator">&lt;</span> lastPlacedIndex <span class="token number">3</span> <span class="token comment">// 之前节点为 abcd，所以 b.index === 1</span></span>
<span class="line">则 b 节点需要向右移动</span>
<span class="line"><span class="token operator">===</span>第二轮遍历结束<span class="token operator">===</span></span>
<span class="line"></span>
<span class="line">最终 acd <span class="token number">3</span> 个节点都没有移动，b 节点被标记为移动</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30)]))}const o=s(l,[["render",t]]),r=JSON.parse('{"path":"/frame/React.html","title":"React","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"jsx","slug":"jsx","link":"#jsx","children":[]},{"level":2,"title":"ReactDOM.render","slug":"reactdom-render","link":"#reactdom-render","children":[]},{"level":2,"title":"diff","slug":"diff","link":"#diff","children":[{"level":3,"title":"reconcileSingleElement","slug":"reconcilesingleelement","link":"#reconcilesingleelement","children":[]},{"level":3,"title":"reconcileChildrenArray","slug":"reconcilechildrenarray","link":"#reconcilechildrenarray","children":[]}]}],"git":{"updatedTime":1666173781000,"contributors":[{"name":"wuhui","username":"wuhui","email":"maniwu@aijiatui.com","commits":1,"url":"https://github.com/wuhui"},{"name":"wu.hui","username":"","email":"wu.hui@qkupower.com","commits":3}],"changelog":[{"hash":"dc09e98f4a6baa7bd0636b47e7ddda0f8643a199","time":1666173781000,"email":"wu.hui@qkupower.com","author":"wu.hui","message":"feat: up"},{"hash":"38aa809701ff04db3c77f1bde4204246e73ed8e8","time":1664327908000,"email":"wu.hui@qkupower.com","author":"wu.hui","message":"feat: up"},{"hash":"ec8b66643ce7f9a3c2702b3ef8107912a38ab499","time":1663639462000,"email":"wu.hui@qkupower.com","author":"wu.hui","message":"feat: 文件目录"},{"hash":"d26e4a13cfeb6929ab0592e823d92e4a930fc261","time":1628756554000,"email":"maniwu@aijiatui.com","author":"wuhui","message":"up"}]},"filePathRelative":"frame/React.md"}');export{o as comp,r as data};
