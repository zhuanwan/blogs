import{_ as s,c as a,e,o as p}from"./app-Cqb5tvJn.js";const l={};function t(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="纯函数" tabindex="-1"><a class="header-anchor" href="#纯函数"><span>纯函数</span></a></h1><p>props 数据-分隔改成驼峰，有下面的代码</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">/**</span>
<span class="line"> * Create a cached version of a pure function.</span>
<span class="line"> * 创建纯函数的缓存版本</span>
<span class="line"> */</span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token keyword">function</span> cached<span class="token operator">&lt;</span>F: Function<span class="token operator">&gt;</span> <span class="token punctuation">(</span>fn: F<span class="token punctuation">)</span>: F <span class="token punctuation">{</span></span>
<span class="line">  const cache <span class="token operator">=</span> Object.create<span class="token punctuation">(</span>null<span class="token punctuation">)</span></span>
<span class="line">  <span class="token builtin class-name">return</span> <span class="token punctuation">(</span>function cachedFn <span class="token punctuation">(</span>str: string<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    const hit <span class="token operator">=</span> cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span></span>
<span class="line">    <span class="token builtin class-name">return</span> hit <span class="token operator">||</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">(</span>str<span class="token punctuation">))</span></span>
<span class="line">  <span class="token punctuation">}</span>: any<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">/**</span>
<span class="line"> * Camelize a hyphen-delimited string.</span>
<span class="line"> * 对-分隔的字符串进行驼峰处理</span>
<span class="line"> */</span>
<span class="line">const camelizeRE <span class="token operator">=</span> /-<span class="token punctuation">(</span><span class="token punctuation">\\</span>w<span class="token punctuation">)</span>/g</span>
<span class="line"><span class="token builtin class-name">export</span> const camelize <span class="token operator">=</span> cached<span class="token punctuation">((</span>str: string<span class="token punctuation">)</span>: string <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin class-name">return</span> str.replace<span class="token punctuation">(</span>camelizeRE, <span class="token punctuation">(</span>_, c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> c ? c.toUpperCase<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">name <span class="token operator">=</span> camelize<span class="token punctuation">(</span>val<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中包含两个知识点</p><ul><li>replace</li><li>纯函数</li></ul><h2 id="repace" tabindex="-1"><a class="header-anchor" href="#repace"><span>repace</span></a></h2><h3 id="第一种-两个参数都是字符串" tabindex="-1"><a class="header-anchor" href="#第一种-两个参数都是字符串"><span>第一种，两个参数都是字符串</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">const str <span class="token operator">=</span> <span class="token string">&#39;参数123字符串&#39;</span>.replace<span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span>, <span class="token string">&#39;啊啊啊&#39;</span><span class="token punctuation">)</span></span>
<span class="line">// 参数啊啊啊字符串</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二种-第一个参数正则-第二个参数字符串" tabindex="-1"><a class="header-anchor" href="#第二种-第一个参数正则-第二个参数字符串"><span>第二种，第一个参数正则，第二个参数字符串</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">const str <span class="token operator">=</span> <span class="token string">&#39;参数123字符串&#39;</span>.replace<span class="token punctuation">(</span>/<span class="token punctuation">\\</span>d+/g, <span class="token string">&#39;啊啊啊&#39;</span><span class="token punctuation">)</span></span>
<span class="line">// 参数啊啊啊字符串</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第三种-第一个参数正则-第二个参数带-号字符串" tabindex="-1"><a class="header-anchor" href="#第三种-第一个参数正则-第二个参数带-号字符串"><span>第三种，第一个参数正则，第二个参数带$号字符串</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">const str <span class="token operator">=</span> <span class="token string">&#39;参数123字符串456新增&#39;</span>.replace<span class="token punctuation">(</span>/<span class="token punctuation">(</span><span class="token punctuation">\\</span>d+<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">\\</span>D<span class="token punctuation">)</span>/g, <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span></span>
<span class="line">// <span class="token string">&quot;参数123符串456增&quot;</span></span>
<span class="line">// 正则里面 <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>第一个<span class="token punctuation">)</span><span class="token punctuation">(</span>第二个<span class="token punctuation">)</span> 替换为 <span class="token punctuation">(</span>第一个<span class="token punctuation">)</span></span>
<span class="line">//             <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">(</span>字<span class="token punctuation">)</span> 替换为 <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></span>
<span class="line">// 记住要加括号</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第四种-第一个参数正则-第二个参数函数" tabindex="-1"><a class="header-anchor" href="#第四种-第一个参数正则-第二个参数函数"><span>第四种，第一个参数正则，第二个参数函数</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">// 不加括号</span>
<span class="line">const str <span class="token operator">=</span> <span class="token string">&#39;参数123字符串456新增&#39;</span>.replace<span class="token punctuation">(</span>/<span class="token punctuation">\\</span>d+/g, function<span class="token punctuation">(</span>arg1, arg2, arg3<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console.log<span class="token punctuation">(</span><span class="token string">&#39;arg1:&#39;</span>, arg1<span class="token punctuation">)</span></span>
<span class="line">  console.log<span class="token punctuation">(</span><span class="token string">&#39;arg2:&#39;</span>, arg2<span class="token punctuation">)</span></span>
<span class="line">  console.log<span class="token punctuation">(</span><span class="token string">&#39;arg3:&#39;</span>, arg3<span class="token punctuation">)</span></span>
<span class="line">  <span class="token builtin class-name">return</span> <span class="token string">&#39;*&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">// <span class="token string">&quot;参数*字符串*新增&quot;</span></span>
<span class="line"></span>
<span class="line">arg1: <span class="token number">123</span>                  // 第一个匹配的字符串</span>
<span class="line">arg2: <span class="token number">2</span>                    // 第一个匹配的字符串的位置</span>
<span class="line">arg3: 参数123字符串456新增   // 原字符串</span>
<span class="line">arg1: <span class="token number">456</span>                 // 第二个匹配的字符串</span>
<span class="line">arg2: <span class="token number">8</span>                   // 第二个匹配的字符串的位置</span>
<span class="line">arg3: 参数123字符串456新增  // 原字符串</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">// 加括号</span>
<span class="line">const str <span class="token operator">=</span> <span class="token string">&#39;参数123字符串456新增&#39;</span>.replace<span class="token punctuation">(</span>/<span class="token punctuation">(</span><span class="token punctuation">\\</span>d+<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">\\</span>D<span class="token punctuation">)</span>/g, function<span class="token punctuation">(</span>arg1, arg2, arg3, arg4, arg5<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console.log<span class="token punctuation">(</span><span class="token string">&#39;arg1:&#39;</span>, arg1<span class="token punctuation">)</span></span>
<span class="line">  console.log<span class="token punctuation">(</span><span class="token string">&#39;arg2:&#39;</span>, arg2<span class="token punctuation">)</span></span>
<span class="line">  console.log<span class="token punctuation">(</span><span class="token string">&#39;arg3:&#39;</span>, arg3<span class="token punctuation">)</span></span>
<span class="line">  console.log<span class="token punctuation">(</span><span class="token string">&#39;arg4:&#39;</span>, arg4<span class="token punctuation">)</span></span>
<span class="line">  console.log<span class="token punctuation">(</span><span class="token string">&#39;arg5:&#39;</span>, arg5<span class="token punctuation">)</span></span>
<span class="line">  <span class="token builtin class-name">return</span> <span class="token string">&#39;*&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">// <span class="token string">&quot;参数*符串*增&quot;</span></span>
<span class="line"></span>
<span class="line">arg1: <span class="token number">123</span>字  // 第一个匹配的字符串</span>
<span class="line">arg2: <span class="token number">123</span>   // 第一个匹配的字符串第一个括号匹配内容</span>
<span class="line">arg3: 字    // 第一个匹配的字符串第二个括号匹配内容</span>
<span class="line">arg4: <span class="token number">2</span>    // 第一个匹配的字符串的位置</span>
<span class="line">arg5: 参数123字符串456新增  // 原字符串</span>
<span class="line"></span>
<span class="line">arg1: <span class="token number">456</span>新</span>
<span class="line">arg2: <span class="token number">456</span></span>
<span class="line">arg3: 新</span>
<span class="line">arg4: <span class="token number">8</span></span>
<span class="line">arg5: 参数123字符串456新增</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回到代码中</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>str.replace(camelizeRE, (_, c) =&gt; c ? c.toUpperCase() : &#39;&#39;) 这里用的是repace第四种加括号</p></div><h2 id="纯函数-1" tabindex="-1"><a class="header-anchor" href="#纯函数-1"><span>纯函数</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。</p></div><p>源码改下</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token keyword">function</span> cached<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  const cache <span class="token operator">=</span> Object.create<span class="token punctuation">(</span>null<span class="token punctuation">)</span></span>
<span class="line">  <span class="token builtin class-name">return</span> <span class="token keyword">function</span> cachedFn <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    const hit <span class="token operator">=</span> cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>hit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console.log<span class="token punctuation">(</span>str + <span class="token string">&#39;取缓存&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token builtin class-name">return</span> hit</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      console.log<span class="token punctuation">(</span>str + <span class="token string">&#39;执行fn&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line">      <span class="token builtin class-name">return</span> cache<span class="token punctuation">[</span>str<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">const camelizeRE <span class="token operator">=</span> /-<span class="token punctuation">(</span><span class="token punctuation">\\</span>w<span class="token punctuation">)</span>/g</span>
<span class="line">const camelize <span class="token operator">=</span> cached<span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin class-name">return</span> str.replace<span class="token punctuation">(</span>camelizeRE, <span class="token punctuation">(</span>_, c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> c ? c.toUpperCase<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">const str1 <span class="token operator">=</span> camelize<span class="token punctuation">(</span><span class="token string">&#39;abc-def-g&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console.log<span class="token punctuation">(</span><span class="token string">&#39;str1:&#39;</span>, str1<span class="token punctuation">)</span></span>
<span class="line">const str2 <span class="token operator">=</span> camelize<span class="token punctuation">(</span><span class="token string">&#39;abc-def-g&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console.log<span class="token punctuation">(</span><span class="token string">&#39;str2:&#39;</span>, str2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">abc-def-g执行fn</span>
<span class="line">str1: abcDefG</span>
<span class="line">abc-def-g取缓存</span>
<span class="line">str2: abcDefG</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参考 https://segmentfault.com/a/1190000008787668</li><li>参考 https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch3.html#%E8%BF%BD%E6%B1%82%E2%80%9C%E7%BA%AF%E2%80%9D%E7%9A%84%E7%90%86%E7%94%B1</li></ul>`,24)]))}const o=s(l,[["render",t]]),u=JSON.parse('{"path":"/frame/%E7%BA%AF%E5%87%BD%E6%95%B0.html","title":"纯函数","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"repace","slug":"repace","link":"#repace","children":[{"level":3,"title":"第一种，两个参数都是字符串","slug":"第一种-两个参数都是字符串","link":"#第一种-两个参数都是字符串","children":[]},{"level":3,"title":"第二种，第一个参数正则，第二个参数字符串","slug":"第二种-第一个参数正则-第二个参数字符串","link":"#第二种-第一个参数正则-第二个参数字符串","children":[]},{"level":3,"title":"第三种，第一个参数正则，第二个参数带$号字符串","slug":"第三种-第一个参数正则-第二个参数带-号字符串","link":"#第三种-第一个参数正则-第二个参数带-号字符串","children":[]},{"level":3,"title":"第四种，第一个参数正则，第二个参数函数","slug":"第四种-第一个参数正则-第二个参数函数","link":"#第四种-第一个参数正则-第二个参数函数","children":[]}]},{"level":2,"title":"纯函数","slug":"纯函数-1","link":"#纯函数-1","children":[]}],"git":{"updatedTime":1622022772000,"contributors":[{"name":"wuhui","username":"wuhui","email":"maniwu@aijiatui.com","commits":2,"url":"https://github.com/wuhui"}],"changelog":[{"hash":"22549e7953a41909f4b84da9c0fc81e3df7a1ca8","time":1622022772000,"email":"maniwu@aijiatui.com","author":"wuhui","message":"up"},{"hash":"d2b0f6e6d5afd203845e235dab9ae35797e9a5ef","time":1589881311000,"email":"maniwu@aijiatui.com","author":"wuhui","message":"up"}]},"filePathRelative":"frame/纯函数.md"}');export{o as comp,u as data};
